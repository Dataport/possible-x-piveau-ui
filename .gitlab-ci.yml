cache:
  paths:
   - node_modules/

stages:
  - build
  - create-tags
  - register
  - deploy
  - publish


build-asset:
  stage: build
  image: node:16-alpine3.16
  only:
    - master
    - develop
    - tags
  script:
    - npm ci
    - cp config/user-config.sample.js config/user-config.js
    - npm run build
  artifacts:
    paths:
      - dist

semantic-release:
  image: node:18
  stage: create-tags
  only:
    - master
    - develop
  before_script:
    - apt-get update && apt-get install -y --no-install-recommends git-core ca-certificates
    - npm install --only=dev
  script:
    - npx semantic-release

################################################
# NO MORE MODIFICATIONS BELOW THIS COMMENT !!! #
################################################

#
# Theme builder start
#

register theme-builder latest:
  stage: register
  tags:
    - dind
  image: docker:latest
  variables:
    DOCKER_DRIVER: overlay2
  services:
    - docker:dind
  only:
    - develop
  script:
    - docker login -u "gitlab-ci-token" -p "$CI_JOB_TOKEN" $CI_REGISTRY
    - docker build --pull -f theme-builder-dockerfile -t "${CI_REGISTRY_IMAGE}/theme-builder":latest .
    - docker push "${CI_REGISTRY_IMAGE}/theme-builder":latest


register theme-builder release:
  stage: register
  tags:
    - dind
  image: docker:latest
  variables:
    DOCKER_DRIVER: overlay2
    GITLAB_COM_REGISTRY_IMAGE: $GITLAB_COM_REGISTRY/piveau/hub/$CI_PROJECT_NAME
  services:
    - docker:dind
  only:
    - tags
  script:
    - docker login -u "gitlab-ci-token" -p "$CI_JOB_TOKEN" $CI_REGISTRY
    - docker build --pull -f theme-builder-dockerfile -t "${CI_REGISTRY_IMAGE}/theme-builder":$CI_COMMIT_TAG .
    - docker push "${CI_REGISTRY_IMAGE}/theme-builder":$CI_COMMIT_TAG
    - docker login -u "$GITLAB_COM_USERNAME" -p "$GITLAB_COM_TOKEN" $GITLAB_COM_REGISTRY
    - docker tag "${CI_REGISTRY_IMAGE}/theme-builder":$CI_COMMIT_TAG "${GITLAB_COM_REGISTRY_IMAGE}/theme-builder":$CI_COMMIT_TAG
    - docker push "${GITLAB_COM_REGISTRY_IMAGE}/theme-builder":$CI_COMMIT_TAG
    - docker tag "${GITLAB_COM_REGISTRY_IMAGE}/theme-builder":$CI_COMMIT_TAG "${GITLAB_COM_REGISTRY_IMAGE}/theme-builder":latest
    - docker push "${GITLAB_COM_REGISTRY_IMAGE}/theme-builder":latest

#
# Theme builder end
#


register develop as latest:
  stage: register
  tags:
    - dind
  image: docker:latest
  variables:
    DOCKER_DRIVER: overlay2
  services:
    - docker:dind
  only:
    - develop
  script:
    - docker login -u "gitlab-ci-token" -p "$CI_JOB_TOKEN" $CI_REGISTRY
    - docker build --pull -t "$CI_REGISTRY_IMAGE":latest .
    - docker push "$CI_REGISTRY_IMAGE":latest



register master as release:
  stage: register
  tags:
    - dind
  image: docker:latest
  variables:
    DOCKER_DRIVER: overlay2
    GITLAB_COM_REGISTRY_IMAGE: $GITLAB_COM_REGISTRY/piveau/hub/$CI_PROJECT_NAME
  services:
    - docker:dind
  only:
    - tags
  script:
    - docker login -u "gitlab-ci-token" -p "$CI_JOB_TOKEN" $CI_REGISTRY
    - docker build --pull -t "$CI_REGISTRY_IMAGE":$CI_COMMIT_TAG .
    - docker push "$CI_REGISTRY_IMAGE":$CI_COMMIT_TAG
    - docker login -u "$GITLAB_COM_USERNAME" -p "$GITLAB_COM_TOKEN" $GITLAB_COM_REGISTRY
    - docker tag $CI_REGISTRY_IMAGE:$CI_COMMIT_TAG $GITLAB_COM_REGISTRY_IMAGE:$CI_COMMIT_TAG
    - docker push $GITLAB_COM_REGISTRY_IMAGE:$CI_COMMIT_TAG
    - docker tag $GITLAB_COM_REGISTRY_IMAGE:$CI_COMMIT_TAG $GITLAB_COM_REGISTRY_IMAGE:latest
    - docker push $GITLAB_COM_REGISTRY_IMAGE:latest


#
# Docker images end
#

deploy to openshift:
  stage: deploy
  image: ebits/openshift-client
  only:
    refs:
      - develop
    variables:
      - $OPENSHIFT_SERVER
      - $OPENSHIFT_TOKEN
      - $OPENSHIFT_DOMAIN
  tags:
    - vst
  environment:
    name: Testing
  script:
    - oc login "$OPENSHIFT_SERVER" --token="$OPENSHIFT_TOKEN" --insecure-skip-tls-verify
    - oc import-image $CI_PROJECT_NAME --from=$CI_REGISTRY_IMAGE --confirm
    - oc get services $CI_PROJECT_NAME 2> /dev/null || oc new-app --name=$CI_PROJECT_NAME --image-stream=$CI_PROJECT_NAME
    - oc get routes $CI_PROJECT_NAME 2> /dev/null || oc create route edge --service=$CI_PROJECT_NAME --hostname=$CI_PROJECT_NAME-$OPENSHIFT_DOMAIN --insecure-policy=Redirect --port=8080

publish to gitlab.com:
  image: appropriate/curl
  stage: publish
  only:
    - master
  script:
    # Publish code to GitLab.com
    - curl -X POST -F token=$PIVEAU_PUBLISH_TOKEN -F ref=master -F "variables[VAR_PROJECT_PATH]=$CI_PROJECT_PATH " -F "variables[VAR_PROJECT_NAME]=$CI_PROJECT_NAME" https://gitlab.fokus.fraunhofer.de/api/v4/projects/9624/trigger/pipeline


downstream triggers:
  stage: deploy
  image: appropriate/curl
  only:
    - develop
    - master
    - tags
  allow_failure: true
  script:
    - export FINAL_REF=$( [[ -z $CI_COMMIT_TAG ]] && echo $CI_COMMIT_REF_NAME || echo "master" )
